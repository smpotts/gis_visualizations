install.packages("sp")
install.packages("s2")
library(s2)
install.packages("~/Downloads/raster_3.6-26.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("sp")
install.packages("s")
install.packages("d3po")
library(s2)
install.packages("d3po")
setwd("/Users/spotts/Projects/gis_visualizations")
getwd()
#######Descriptive Statistics#####
#######Written by SEEMAB AKHTAR###
install_github("dcomtois/summarytools")
install.packages("devtools")
install.packages ("Hmisc")
install.packages ("pastecs")
a=read.csv("DS.csv", TRUE, ",")#######data uploading
class(a)
a
summary(a)
library(devtools)
library (Hmisc)
library (pastecs)
summarytools::descr(a)
sta_1<-stat.desc(a)
class(sta_1)
install.packages(summarytools)
class(sta_2)
print (df)
sta_2<-describe(a)
sta_2
print (df)
write.table(sta_1, file = "statistics_1.csv", sep ="," )########export results
write.table(df, file = "statistics_2.csv", sep ="," )
write.table(sta_1, file = "statistics_1.csv", sep ="," )########export results
write.table(df, file = "statistics_2.csv", sep ="," )
mydata <- read.csv(file.choose())
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(data=mydata, aes(x=caret, y=price)) +
geom_point()
install.packages("ggplot2")
ggplot(data=mydata, aes(x=caret, y=price)) +
geom_point()
ggplot2(data=mydata, aes(x=caret, y=price)) +
geom_point()
install.packages("ggplot2")
ggplot(data=mydata, aes(x=caret, y=price)) +
geom_point()
library(ggplot2)
ggplot(data=mydata, aes(x=caret, y=price)) +
geom_point()
ggplot(data=mydata, aes(x=carat, y=price)) +
geom_point()
ggplot(data=mydata, aes(x=carat, y=price, colour=clarity)) +
geom_point()
# create a scatter plot
ggplot(data=mydata, aes(x=carat, y=price, colour=clarity)) +
geom_point(alpha=0.1)
ggplot(data=mydata[mydata$carat<2.5,], aes(x=carat, y=price, colour=clarity)) +
geom_point(alpha=0.1)
ggplot(data=mydata[mydata$carat<2.5,], aes(x=carat, y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
# integer
x <- 10
x
# integer
x <- 2
x
# integer
x <- 2L
x
typeof(x)
# double
y <- 3.9
typeof(y)
# integer
x <- 2
typeof(x)
# complex
z <- 3 + 2i
z
typeof(z)
# character
a <- "h"
typeof(a)
# logical
q1 <- true
typeof(q1)
# logical
q1 <- TRUE
typeof(q1)
q2 <- F
A <- 10
B <- 5
C <- A + B
var1 <- 2.5
var2 <- 4
result <- var1 / var2
result
answer <- sqrt(var2)
answer
message <- paste(greeting, name)
greeting <- "Hello"
name <- "Shelby"
message <- paste(greeting, name)
message
4 < 5
4 == 5
4 != 5
4 < 5
4 > 5
4 ! 5
4 | 5
result <- 4 < 5
type(result)
result <- 4 < 5
type(result)
result
type(result)
typofe(result)
typeof(result)
result2 <- !TRUE
result2
result2 <- !(5 > 1)
result2
result | result2
result & result2
x = 5
while(x > 0){
x -= 1
x = 5
while(x > 0){
x = x - 1
x
}
x = 5
while(x > 0){
x = x - 1
print(x)
}
x <- 5
while(x > 0){
x <- x - 1
print(x)
}
x <- 6
x
for( i in 1:5) {
print("Hello World")
}
1:5
for(i in 5:10) {
print("Hello, World")
}
print(i)
for(i in 1:5) {
print(i)
}
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rnorm(1) # generates random numbers, specify normal distribution
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rnorm(1) # generates random numbers, specify normal distribution
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
x <- rnorm(1) # generates random numbers, specify normal distribution
if(x < 0){
print("negative")
}
if(x < 0){
print("negative")
} else {
print("positive")
}
x <- rnorm(1) # generates random numbers, specify normal distribution
if(x < 0){
print("negative")
} else {
print("positive")
}
x <- rnorm(1) # generates random numbers, specify normal distribution
if(x < 0){
print("negative")
} else {
print("positive")
}
x <- rnorm(1) # generates random numbers, specify normal distribution
if(x < 0){
print("negative")
} else {
print("positive")
}
x <- rnorm(1) # generates random numbers, specify normal distribution
if(x < 0){
print("negative")
} else {
print("positive")
}
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <+ counter + 1
}
}
ounter
conuter
counter
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <+ counter + 1
}
}
counter
# rnorm() generated a number around 0 and was less probable when further away
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / 100
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / 100
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / 100
counter <- 0
for(i in rnorm(100)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / 100
N <- 1000
counter <- 0
for(i in rnorm(N)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / N
N <- 1000
counter <- 0
for(i in rnorm(N)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / N
N <- 1000
counter <- 0
for(i in rnorm(N)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / N
N <- 10000
counter <- 0
for(i in rnorm(N)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / N
N <- 10000
counter <- 0
for(i in rnorm(N)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / N
N <- 10000
counter <- 0
for(i in rnorm(N)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / N
N <- 100000
counter <- 0
for(i in rnorm(N)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / N
N <- 100000
counter <- 0
for(i in rnorm(N)) {
if(i > -1 & i < 1) {
counter <- counter + 1
}
}
counter / N
